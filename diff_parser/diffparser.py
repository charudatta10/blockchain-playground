

class DiffParser(object):

    def __init__(self):
        self.newLines = []

    def parseBlock(self, content, op, src_lines, tar_lines, out_modmark, out_content):
        n_tar = tar_lines[-1] - tar_lines[0] + 1
        n_src = src_lines[-1] - src_lines[0] + 1

        for i in range(src_lines[0], src_lines[-1]+1):
            if op == 'd':
                out_modmark[i] = (0, n_src-1, False)
            elif op == 'a':
                out_modmark[i] = (n_tar, 0, True)
            else:
                if src_lines[0] == i:
                    out_modmark[i] = (n_tar, n_src-1, False)
                else:
                    out_modmark = "whatever"
                
        for t, i in enumerate(range(tar_lines[0], tar_lines[-1]+1)):
            if t >= len(content): break
            out_content[i] = content[t][2:]


    def findModification(self, diff, src_len):
        """
        @params
            diff: list of lines of diff file
            src_len: number of lines in source file
        """


        # transition: what we should do when reading K-th from source file
        # transition[k] = (move_target_pointer, move_source_pointer, should_copy_current_sentence)
        transition = [None for _ in range(src_len)]

        # content store, content[line_number_in_target] = <new_content>
        content = {}

        # helper function
        isOperation = lambda lin : lin[0] >= '0' and lin[0] <= '9'
        
        # read lines
        i = 0
        while i < len(diff):
            line = diff[i]
            if isOperation(line):
                # find operator
                op = None
                for x in ['a','c','d']:
                    if x in line:
                        op = x
                        break
                # find modification ranges of source & target
                src_lines, tar_lines = line.split(op)
                src_lines, tar_lines = src_lines.split(','), tar_lines.split(',')
                src_lines = [int(x) for x in src_lines]
                tar_lines = [int(x) for x in tar_lines]
                

                # collect all important new content from block
                i += 1
                content_in_block = []
                while i < len(diff) and not isOperation(diff[i]):
                    if diff[i][0] == '>':
                        content_in_block.append(diff[i])
                    i += 1
                
                # update transition and content
                self.parseBlock(content_in_block, op, src_lines, tar_lines, transition, content)

        return transition, content

                
    
    def Parse(self, source, diff):
        """
        @params
            source: file content before modification, a list of lines/strings
            diff:   diff file generated by executing 'diff source target', a list of lines/strings
        @return
            target
        """

        source = [""] + source
        target = []

        transition, content = self.findModification(diff, len(source))
        
        i = 0
        while i < len(source):
            if transition[i] is None:
                # no transition needed, just copy
                target.append(source[i])

            else:
                # transition exists, move pointers accordingly
                move_pt, move_offset, store = transition[i]
                if store:
                    target.append(source[i])
                for _ in range(move_pt):
                    target.append("")
                i += move_offset
            i += 1


        # refill content from hash map to target list
        for i in range(len(target)):
            if i in content:
                target[i] = content[i]

        
        return target[1:]
